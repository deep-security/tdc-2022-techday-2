AWSTemplateFormatVersion: 2010-09-09
Description: Wrinkles

Parameters:
  MainStackId:
    Type: String

Resources:
  WrinkleTriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AdministratorAccess
  WrinkleTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda to trigger wrinkle build
      Timeout: 30
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !GetAtt WrinkleTriggerLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          def lambda_handler(event, context):
              mainStackId = os.environ['MainStackId']
              parameters = { }
              outputs = { }
              cfnClient = boto3.client('cloudformation')
              mainStack = cfnClient.describe_stacks(
                  StackName=mainStackId
                  )
              # It collects all parameters used in the main stack so it can be reused here.
              for parameter in mainStack['Stacks'][0]['Parameters']:
                  parameters[parameter['ParameterKey']] = parameter['ParameterValue']
              # It collects all outputs generated by the main stack so it can be reused here.
              for output in mainStack['Stacks'][0]['Outputs']:
                  outputs[output['OutputKey']] = output['OutputValue']
              createStackResponse = cfnClient.create_stack(
                  StackName="Wrinkles",
                  TemplateURL=f"https://{parameters['QSS3BucketName']}.s3.amazonaws.com/{parameters['QSS3KeyPrefix']}templates/day2_main.template.yaml",
                  Parameters=[
                      {
                          'ParameterKey': 'QSS3BucketName',
                          'ParameterValue': parameters['QSS3BucketName']
                      },
                      {
                          'ParameterKey': 'QSS3KeyPrefix',
                          'ParameterValue': parameters['QSS3KeyPrefix']
                      },
                      {
                          'ParameterKey': 'Parameter1',
                          'ParameterValue': parameters['Parameter1']
                      },
                      {
                          'ParameterKey': 'Output2',
                          'ParameterValue': outputs['Output2']
                      }
                  ],
                  Capabilities=[
                      'CAPABILITY_NAMED_IAM'
                      ]
                  )
              return {
                  'statusCode': 200,
                  'body': json.dumps(createStackResponse)
              }
      Environment:
        Variables:
          MainStackId: !Ref MainStackId
