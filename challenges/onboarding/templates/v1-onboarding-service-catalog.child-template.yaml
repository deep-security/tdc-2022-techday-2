AWSTemplateFormatVersion: 2010-09-09
Description: Vision One Onboarding tasks - Tech Day. This is the template that actually creates the resources required for the Tech Day Onboarding Stack. This template includes more config parameters that the parent templates, such as LambdaFunctionTimeout, Zip filenames, and so on, so that we can abstract these values from the Player. 
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Vision One Configuration"
        Parameters:
          - v1TrendRegion
          - v1AuthToken
          - v1UsersList
          # - v1MasterAdminPlayerEmails
      -
        Label:
          default: "DO NOT MODIFY. Game Configuration"
        Parameters:               
          - ssmParameterValue
          - v1ConnectedProductList
          - LambdaFunctionTimeout
      -
        Label:
          default: "DO NOT MODIFY. Game Configuration - SSM Parameter Configuration"
        Parameters:
          - QSS3BucketNameSSMKey
          - QSS3KeyPrefixSSMKey
          - v1OnboardingStatusSSMKey
          - v1ApiBaseUrlSSMKey
          - v1ApiKeySSMKey
          - v1CustomerIdSSMKey       
    ParameterLabels:
      v1TrendRegion:
        default: "Vision One Hosted Region"
      v1AuthToken:
        default: "Vision One Auth Token"
      v1UsersList:
        default: "Vision One User comma-separated list of email addresses"
      # v1MasterAdminPlayerEmails:
      #   default: "Vision One User comma-separated list of email addresses for Master Administrator Access Role"
      QSS3BucketNameSSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for S3 Bucket Name"
      QSS3KeyPrefixSSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for S3 Key Prefix"
      c1OnboardingStatusSSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for Cloud One Onboarding status"
      v1OnboardingStatusSSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for Vision One Onboarding status"
      v1ApiBaseUrlSSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for Vision One API Base URL"
      v1ApiKeySSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for Vision One API Key"
      v1CustomerIdSSMKey:
        default: "DO NOT MODIFY. Game Engine Config. SSM Key for Vision One Customer ID"      
      ssmParameterValue:
        default: "DO NOT MODIFY. Game Engine Config. Expected SSM Parameter value for v1OnboardingStatusSSMKey"
      v1ConnectedProductList:
        default: "DO NOT MODIFY. Game Engine Config. Expected Vision One Connected product(s) list"
      LambdaFunctionTimeout:
        default: "DO NOT MODIFY. Game Engine Config. Lambda function global timeout parameter"

Parameters:
  v1TrendRegion:
    Default: "United States"
    AllowedValues: ["United States", "Europe", "Singapore", "Japan", "Australia", "India"]
    Description: Vision One Trend Region
    Type: String
  v1AuthToken:
    AllowedPattern: ([a-zA-Z0-9]+)\.([a-zA-Z0-9]+)\.([a-zA-Z0-9-_]+)
    ConstraintDescription: Must contain only alphanumeric characters, hyphens and underscores separated by a dot (.)
    Description: Vision One Authentication Token
    Type: String
    NoEcho: true
  v1UsersList:
    Description: Comma-separated email addresses that are part of the Vision One account.
    Type: String
    AllowedPattern: ".+"
    MinLength: 6
  # v1MasterAdminPlayerEmails:    
  #   Default: "None"
  #   Description: Comma-separated email addresses that would be invited to Vision One with Master Admin role privileges
  #   Type: String
  QSS3BucketNameSSMKey:
    Type: String
    Default: QSS3BucketName
    AllowedValues: ["QSS3BucketName"]
    Description: DO NOT CHANGE THIS VALUE
  QSS3KeyPrefixSSMKey:
    Type: String
    Default: QSS3KeyPrefix
    AllowedValues: ["QSS3KeyPrefix"]
    Description: DO NOT CHANGE THIS VALUE
  c1OnboardingStatusSSMKey:
    Default: "/player/C1/c1OnboardingStatus"
    Description: DO NOT MODIFY. SSM Parameter Key for validating Cloud One onboarding status.
    Type: String
  v1OnboardingStatusSSMKey:
    Default: "/player/V1/v1OnboardingStatus"
    Description: DO NOT MODIFY. SSM Parameter Key for validating Vision One Onboarding status.
    Type: String
  v1ApiBaseUrlSSMKey:
    Default: "/player/V1/v1ApiBaseUrl"
    Description: DO NOT MODIFY. SSM Parameter Key for fetching Vision One API Base URL.
    Type: String
  v1ApiKeySSMKey:
    Default: "/player/V1/v1ApiKey"
    Description: DO NOT MODIFY. SSM Parameter Key for fetching Vision One API Key.
    Type: String
  v1CustomerIdSSMKey:
    Default: "/player/V1/v1CustomerId"
    Description: DO NOT MODIFY. SSM Parameter Key for fetching Vision One Customer ID.
    Type: String
  ssmParameterValue:
    Default: "Success"
    Description: DO NOT MODIFY. Expected value of the SSM Parameter Value for the Onboarding tasks.
    Type: String
  v1ConnectedProductList:
    Default: "sws"
    Description: DO NOT MODIFY. Comma-separated Cloud One services codes that need to be connected to the Vision One account.
    Type: String  
  LambdaFunctionTimeout:
    Type: Number
    Default: 900
  V1PostOnboardFunctionName:
    Default: "V1PostOnboardFunctionName"
    Description: DO NOT MODIFY. Expected value of the SSM Parameter Value for the Post Onboard function name.
    Type: 'AWS::SSM::Parameter::Value<String>'

Resources:
  # Creates an IAM role for the AWS Lambda functions.
  TechDayV1onboardingLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Join
            - "-"
            - - techday-visionone-onboarding
              - prod
              - lambda
              - ssm
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${QSS3BucketNameSSMKey}
                    - QSS3BucketNameSSMKey: !Ref QSS3BucketNameSSMKey
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${QSS3KeyPrefixSSMKey}
                    - QSS3KeyPrefixSSMKey: !Ref QSS3KeyPrefixSSMKey
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${c1OnboardingStatusSSMKey}
                    - c1OnboardingStatusSSMKey: !Ref c1OnboardingStatusSSMKey
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${v1OnboardingStatusSSMKey}
                    - v1OnboardingStatusSSMKey: !Ref v1OnboardingStatusSSMKey
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${v1ApiBaseUrlSSMKey}
                    - v1ApiBaseUrlSSMKey: !Ref v1ApiBaseUrlSSMKey
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${v1ApiKeySSMKey}
                    - v1ApiKeySSMKey: !Ref v1ApiKeySSMKey
                  - !Sub
                    - arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${v1CustomerIdSSMKey}
                    - v1CustomerIdSSMKey: !Ref v1CustomerIdSSMKey                  
                Action:
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
      Path: /
      Tags:
        - Key: BusinessCase
          Value: C1onboarding-TechDay
    
  # Creates an AWS Lambda function with the Vision One Onboarding module.
  V1OnboardingLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import urllib3
          import urllib.parse
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Contains a list of Vision One supported regions.
          v1SupportedRegions = ["United States", "Europe", "Singapore", "Japan", "Australia", "India"]

          # Contains a dictionary of Vision One supported regions and their region-based API Endpoint Base URLs with Region Names as dictionary keys.
          v1ApiEndpointBaseUrls = {
              "Australia": "api.au.xdr.trendmicro.com",
              "Europe": "api.eu.xdr.trendmicro.com",
              "India": "api.in.xdr.trendmicro.com",
              "Japan": "api.xdr.trendmicro.co.jp",
              "Singapore": "api.sg.xdr.trendmicro.com",
              "United States": "api.xdr.trendmicro.com"
          }

          # Returns the Vision One region-based API Endpoint Base URL.
          def v1ApiEndpointBaseUrl(v1TrendRegion):

              return "https://" + v1ApiEndpointBaseUrls[v1TrendRegion] + "/beta/xdr/portal"

          # Validates the Vision One Auth token passed to this function by listing roles in the Vision One account, returns True if success, otherwise False.
          def v1VerifyAuthToken(ssmClient, http, httpHeaders, v1TrendRegion):

              r = http.request('GET', v1ApiEndpointBaseUrl(v1TrendRegion) + "/accounts/roles", headers=httpHeaders)

              v1ListAccountsResponse = json.loads(r.data)
              
              responseHeadersList = r.getheaders()

              if responseHeadersList:
                  
                  if "TMV1-Customer-ID" in responseHeadersList.keys():

                      # Stores global Trend V1 Customer ID as an SSM Parameter  "v1CustomerId", from HTTP Response headers.
                      setV1SsmParameter(ssmClient, "v1CustomerId", responseHeadersList["TMV1-Customer-ID"])
                      
              if "code" in v1ListAccountsResponse:

                  if v1ListAccountsResponse["code"] == "Success":

                      return True
              
              # In case it doesn't return True above.
              raise Exception('Error: Invalid/inactive API Key')

          # Invites player to the Vision One account via email, assigns a Vision One Role based on the params passed to this function.
          def v1InvitePlayer(http, httpHeaders, v1TrendRegion, emailId, v1Role):

              # HTTP Body for the Player Invitation to the Vision One account.
              httpBody = {
                  "type": 0,
                  "name": str(emailId),
                  "enabled": True,
                  "description": "Account created by API for Tech Day.",
                  "token": "",
                  "authorization": 3,
                  "role": str(v1Role)
              }

              v1InvitePlayerResponse = json.loads(http.request('POST', v1ApiEndpointBaseUrl(v1TrendRegion) + "/accounts/" + urllib.parse.quote_plus(str(emailId)) , headers=httpHeaders, body=json.dumps(httpBody)).data)

              if "error" in v1InvitePlayerResponse:

                  print("Error Code: " + str(v1InvitePlayerResponse["error"]["code"]), "Message: ",  str(v1InvitePlayerResponse["error"]["message"]), "-", str(emailId))
              
              elif "code" in v1InvitePlayerResponse:

                  if "Success" in v1InvitePlayerResponse["code"]:

                      print("Invitation sent to " + str(emailId) + " with role as " + str(v1Role) + ".")

                      return True

                  else:
                      raise Exception('Error: Invitation unsuccessful.')

          # Verify User Accounts exist in the Vision One account.
          def v1VerifyUserAccounts(http, httpHeaders, v1TrendRegion, v1UsersList):

              v1UserAccountsResponse = json.loads(http.request('GET', v1ApiEndpointBaseUrl(v1TrendRegion)  + "/accounts", headers=httpHeaders).data)
              
              v1UserAccountsDict = {}
              
              for userAccount in v1UserAccountsResponse["data"]["items"]:

                  v1UserAccountsDict.update({userAccount["email"].lower(): userAccount["enabled"]})

              for user in v1UsersList:

                  if user not in v1UserAccountsDict.keys():

                      raise Exception('Error: User account "' + str(user) + '" not found in the Vision One Account')

                  elif not v1UserAccountsDict[user]:

                      raise Exception('Error: User account "' + str(user) + '" is disabled in the Vision One Account')

                  else:
                      print("Success: User '" + str(user) + "' exists in the Vision One account")            

              return True

          # Retrieve SSM Parameter value based on parameter key passed.
          def getV1SsmParameter(ssmClient, paramKey):
              
              parameter = ssmClient.get_parameter(Name='/player/V1/' + paramKey, WithDecryption=True)

              return parameter ['Parameter']['Value']

          # Store SSM Parameter key and value on the AWS backend for future use.
          def setV1SsmParameter(ssmClient, paramKey, paramValue):
              
              parameter = ssmClient.put_parameter(Name='/player/V1/' + paramKey, Value=paramValue, Type='String', Overwrite=True)

              print(str(parameter))

          def handler(event, context):

              # Setup
              logger.info("event: {}".format(event))
              status = cfnresponse.SUCCESS
              responseData = {}
              responseData['Data'] = {}

              try:
                  if event['RequestType'] == 'Create':
                      # Read AWS Lambda Environment variables into the Lambda runtime as variables.
                      awsRegion = str(os.environ.get("awsRegion"))
                      v1TrendRegion = str(os.environ.get("v1TrendRegion"))    
                      v1AuthToken = str(os.environ.get("v1AuthToken"))
                      v1UsersList = str(os.environ.get("v1UsersList")).lower()

                      if v1UsersList[-1] == ",":
                          v1UsersList = v1UsersList[:-1].replace(" ", "").split(",")
                      else:
                          v1UsersList = v1UsersList.replace(" ", "").split(",")

                      http = urllib3.PoolManager()

                      # HTTP Headers for Vision One API calls.
                      headers = {
                          "Content-Type": "application/json;charset=utf-8",
                          "Authorization": "Bearer " + v1AuthToken
                      }

                      # If v1TrendRegion is not in the supported regions list, raise exception, else go ahead and verify V1 Auth Token.
                      if v1TrendRegion not in v1SupportedRegions:

                          raise Exception('Error: Invalid Vision One Region')

                      else:

                          # Creating an SSM Client to store values in the AWS SSM Parameter Store.
                          ssmClient = boto3.client('ssm', region_name=awsRegion)

                          # If v1VerifyAuthToken returns True for Vision One API call, store API Key in AWS SSM Parameter Store for future use.
                          if v1VerifyAuthToken(ssmClient, http, headers, v1TrendRegion):

                              print("Trend Region - " + str(v1TrendRegion))

                              print("Vision One APIs are a Go!!!")

                              # Stores global Trend V1 API Base URL as an SSM Parameter  "v1ApiBaseUrl".
                              setV1SsmParameter(ssmClient, "v1ApiBaseUrl", v1ApiEndpointBaseUrl(v1TrendRegion))

                              # Stores global Trend V1 API Key as an SSM Parameter  "v1ApiKey".
                              setV1SsmParameter(ssmClient, "v1ApiKey", v1AuthToken)

                              # Verify if all users exist in the Vision One account, raises exception if any one user fails.
                              if v1VerifyUserAccounts(http, headers, v1TrendRegion, v1UsersList):
                                  
                                  print("Success: User(s) exist in the Vision One account")

                                  # Stores onboarding success as an SSM Parameter "v1Onboarding" for Mission Control verification.
                                  setV1SsmParameter(ssmClient, "v1OnboardingStatus", "Success")           
                                  # Since task was successful, we will kick of the Post Onboarding(AKA Wrinkler) lambda
                                  lambdaClient = boto3.client('lambda')
                                  lambdaClient.invoke(
                                    FunctionName=str(os.environ.get("V1_POST_ONBOARD_LAMBDA_NAME")),
                                    InvocationType="Event"
                                  )
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  status = cfnresponse.FAILED
              
              cfnresponse.send(event, context, status, responseData, None)
      Handler: index.handler
      Runtime: python3.8
      MemorySize: 256
      Timeout: !Ref LambdaFunctionTimeout
      Description: Vision One module for C1onboarding-TechDay
      Tags:
        - Key: BusinessCase
          Value: C1onboarding-TechDay
      Environment:
        Variables:
          awsRegion: !Ref AWS::Region
          v1TrendRegion: !Ref v1TrendRegion
          v1AuthToken: !Ref v1AuthToken
          v1UsersList: !Ref v1UsersList        
          V1_POST_ONBOARD_LAMBDA_NAME: !Ref V1PostOnboardFunctionName
      Role: !GetAtt TechDayV1onboardingLambdaRole.Arn

  # Task 1 - Creates an AWS Lambda function with the Vision One Onboarding verification module.
  VerifyV1OnboardingLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import os
          import boto3

          ssmParametersList = []
          ssmParameterValue = None

          # Retrieve SSM Parameter value based on parameter key passed.
          def getSsmParameter(ssmClient, paramKey):
              
              parameter = ssmClient.get_parameter(Name=paramKey, WithDecryption=True)

              return parameter ['Parameter']['Value']

          def handler(event, context):

              # Read AWS Lambda Environment variables into the Lambda runtime as variables.
              awsRegion = str(os.environ.get("awsRegion"))    
              ssmParametersList = str(os.environ.get("ssmParametersList"))
              ssmParameterValue = str(os.environ.get("ssmParameterValue"))

              if ssmParametersList[-1] == ",":
                  ssmParametersList = ssmParametersList[:-1].replace(" ", "").split(",")
              else:
                  ssmParametersList = ssmParametersList.replace(" ", "").split(",")

              # Creating an SSM Client to store values in the AWS SSM Parameter Store.
              ssmClient = boto3.client('ssm', region_name=awsRegion)

              # If SSM Parameters List is empty and the expected ssmParameterValue is not defined.
              if not len(ssmParametersList) and not ssmParameterValue:

                  raise Exception('Error: Input Invalid with SSM Parameter List and the expected SSM Parameter Value')
              
              else:

                  for ssmParameterKey in ssmParametersList:

                      if ssmParameterValue not in getSsmParameter(ssmClient, ssmParameterKey):

                          raise Exception('Error: Onboarding task incomplete or failed')

                  return True
      Handler: index.handler
      Runtime: python3.8
      FunctionName: techday-cloudone-onboarding-prod-verifyV1Onboarding
      MemorySize: 256
      Timeout: 30
      Description: Task 1 - Vision One Onboarding verification module for C1onboarding-TechDay
      Tags:
        - Key: BusinessCase
          Value: C1onboarding-TechDay
      Environment:
        Variables:
          awsRegion: !Ref AWS::Region
          ssmParametersList: !Join [ ",", [ !Ref v1OnboardingStatusSSMKey ] ]
          ssmParameterValue: !Ref ssmParameterValue
      Role: !GetAtt TechDayV1onboardingLambdaRole.Arn

  # Task 2 - Creates an AWS Lambda function with the Cloud One - Vision One Connectivity verification module.
  VerifyC1V1ConnectivityLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          import urllib3

          serviceConnectionStatusDict = {
              "0": "RED",
              "1": "GREEN"
          }

          # Retrieve SSM Parameter value based on parameter key passed.
          def getV1SsmParameter(ssmClient, paramKey):
              
              parameter = ssmClient.get_parameter(Name=paramKey, WithDecryption=True)

              return parameter ['Parameter']['Value']

          # Enable Trend Remote Support status on the Vision One.
          def enableTrendRemoteSupport(http, v1ApiBaseUrl, httpHeaders):

              body = {
                  'enabled': True
              }

              r = http.request('PUT', v1ApiBaseUrl + "/remoteSupport", headers=httpHeaders, body=json.dumps(body))

              return json.loads(r.data)

          # Retrieve Trend Remote Support status from Vision One.
          def getTrendRemoteSupportStatus(http, v1ApiBaseUrl, httpHeaders):

              r = http.request('GET', v1ApiBaseUrl + "/remoteSupport", headers=httpHeaders)

              getTrendRemoteSupportStatusResponse = json.loads(r.data)

              if "data" in getTrendRemoteSupportStatusResponse:
                  
                  if getTrendRemoteSupportStatusResponse["code"] == "Success":
                      
                      return True

              return False

          def listSupportedProducts(http, v1ApiBaseUrl, httpHeaders):

              r = http.request('GET', v1ApiBaseUrl + "/connectors", headers=httpHeaders)

              return json.loads(r.data)

          def checkServiceConnectionStatus(http, v1ApiBaseUrl, httpHeaders, v1ConnectedProductList):
              
              serviceConnectionStatusResponse = listSupportedProducts(http, v1ApiBaseUrl, httpHeaders)
                  
              if "data" in serviceConnectionStatusResponse:
              
                  if serviceConnectionStatusResponse["code"] == "Success":

                      for service in serviceConnectionStatusResponse["data"]:

                          if service["productId"] in v1ConnectedProductList:

                              if not service["isConnected"]:

                                  raise Exception('Error: Product "' + str(service["productId"]) + '" is not connected to the Vision One account')

                              else:
                                  print("Service", str(service["productId"]), "is Connected and the status is", serviceConnectionStatusDict[str(service["status"])])

                      return True

                  else:
                      raise Exception('Error: Vision One API endpoint errored out or is unavailable.')

              else:
                  raise Exception('Error:', str(serviceConnectionStatusResponse["error"]["code"]))

          def handler(event, context):
              
              # Read AWS Lambda Environment variables into the Lambda runtime as variables.
              awsRegion = str(os.environ.get("awsRegion"))
              v1AuthToken = str(os.environ.get("v1AuthToken"))
              v1ConnectedProductList = str(os.environ.get("v1ConnectedProductList"))
              v1ApiBaseUrlSSMKey = os.environ.get("v1ApiBaseUrlSSMKey")

              if v1ConnectedProductList[-1] == ",":
                  v1ConnectedProductList = v1ConnectedProductList[:-1].replace(" ", "").split(",")
              else:
                  v1ConnectedProductList = v1ConnectedProductList.replace(" ", "").split(",")

              # Creating an SSM Client to store values in the AWS SSM Parameter Store.
              ssmClient = boto3.client('ssm', region_name=awsRegion)

              # Get Vision One API Base URL from the AWS SSM Parameter Store.
              v1ApiBaseUrl = getV1SsmParameter(ssmClient, v1ApiBaseUrlSSMKey)

              http = urllib3.PoolManager()

              headers = {
                  "Content-Type": "application/json;charset=utf-8",
                  "Authorization": "Bearer " + v1AuthToken
              }

              # Enable Trend Remote Support on the Vision One Console.
              print("enableTrendRemoteSupport - " + str(enableTrendRemoteSupport(http, v1ApiBaseUrl, headers)))

              # Verify Trend Remote Support status is enabled.
              print("getTrendRemoteSupportStatus - " + str(getTrendRemoteSupportStatus(http, v1ApiBaseUrl, headers)))

              # Run service connection status on the Vision One console to ensure services in the v1ConnectedProductList list is connected and the status is GREEN.
              checkServiceConnectionStatus(http, v1ApiBaseUrl, headers, v1ConnectedProductList)

              return True
      Handler: index.handler
      Runtime: python3.8
      FunctionName: techday-cloudone-onboarding-prod-verifyC1V1Connectivity
      MemorySize: 256
      Timeout: 30
      Description: Task 2 - Cloud One - Vision One Connectivity verification for C1onboarding-TechDay
      Tags:
        - Key: BusinessCase
          Value: C1onboarding-TechDay
      Environment:
        Variables:
          awsRegion: !Ref AWS::Region
          v1AuthToken: !Ref v1AuthToken
          v1ConnectedProductList: !Ref v1ConnectedProductList
          v1ApiBaseUrlSSMKey: !Ref v1ApiBaseUrlSSMKey
      Role: !GetAtt TechDayV1onboardingLambdaRole.Arn

  # Triggers an AWS Lambda function when the stack is created to check credentials passed from the AWS Service Catalog product.
  VerifyV1OnboardingCustomResource:
    Type: 'Custom::TechDay-V1onboarding-SvcCatalog'
    Properties:
      ServiceToken: !GetAtt V1OnboardingLambdaFunction.Arn

  # Service Catalog associations
  # XDRPortfolioProductAssociation:
  #   Type: AWS::ServiceCatalog::PortfolioProductAssociation
  #   Properties:
  #     PortfolioId: '{{resolve:ssm:PortfolioId:1}}'
  #     ProductId: '{{resolve:ssm:XDRProductID:1}}'

  # XDRLaunchRoleConstraint:
  #   DependsOn: XDRPortfolioProductAssociation
  #   Type: AWS::ServiceCatalog::LaunchRoleConstraint
  #   Properties:
  #     PortfolioId: '{{resolve:ssm:PortfolioId:1}}'
  #     ProductId: '{{resolve:ssm:XDRProductID:1}}'
  #     RoleArn: '{{resolve:ssm:RoleArn:1}}'

  
Outputs:
  # Returns the AWS Lambda Function ARN of the Vision One Onboarding module.
  V1OnboardingLambdaFunctionArn:
    Description: Vision One Onboarding Lambda function ARN
    Value: !GetAtt V1OnboardingLambdaFunction.Arn

