AWSTemplateFormatVersion: 2010-09-09
Description: C1WS Role


Resources:
#Role for adding AWS Connector to C1WS
  WorkloadSecurityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::147995105371:root
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: !GetAtt GetExternalID.ExternalID 
      Path: /
#Policy for adding AWS Connector to C1WS
      Policies:
        - PolicyName: WorkloadSecurityRole
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeImages"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeRegions"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeTags"
                  - "ec2:DescribeVpcs"
                  - "ec2:DescribeAvailabilityZones"
                  - "ec2:DescribeSecurityGroups"
                  - "workspaces:DescribeWorkspaces"
                  - "workspaces:DescribeWorkspaceDirectories"
                  - "workspaces:DescribeWorkspaceBundles"
                  - "workspaces:DescribeTags"
                  - "iam:ListAccountAliases"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                Resource: '*'

#Lambda Execution Role
  AWSConnectorLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AWSConnectorLambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:SendCommand
            Resource:
              - arn:aws:ssm:*:*:parameter/player/C1/c1ApiKey
              - arn:aws:ssm:*:*:parameter/player/C1/c1Region
          - Effect: Allow
            Action:
              - ssm:SendCommand
            Resource:
              - arn:aws:ec2:*:*:instance/*

#Get External ID
  GetExternalIDLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 20
      Handler: index.lambda_handler
      Role: !GetAtt AWSConnectorLambdaFunctionRole.Arn
      Code:
        ZipFile:
          !Sub
            |-
              import json
              import urllib3
              import boto3
              import cfnresponse

              client = boto3.client('ssm')


              def lambda_handler(event, context):
                  response_data = {}
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                    parameter = client.get_parameter(Name='/player/C1/c1ApiKey', WithDecryption=True)
                    #print(parameter)
                    #return parameter ['Parameter']['Value']
                    playerApiKey = parameter ['Parameter']['Value']
                    #return playerApiKey
                    
                    parameter = client.get_parameter(Name='/player/C1/c1Region', WithDecryption=True)
                    playerC1Region = parameter ['Parameter']['Value']


                    url = "https://workload.'+playerC1Region+'.cloudone.trendmicro.com/api/awsconnectorsettings"

                    payload = json.dumps({
                    })
                    headers = {
                      'api-version': 'v1',
                      'Authorization': 'ApiKey '+playerApiKey+'',
                      'Content-Type': 'application/json'
                    }

                    http = urllib3.PoolManager()
                    encoded_payload = payload.encode("utf-8")
                    #print(headers)
                    response = http.request("GET", url=url, headers=headers, body=encoded_payload)
                    response_json_data = json.loads(response.data.decode("utf-8"))
                    print(response_json_data["externalId"])
                    physicalResourceId = response_json_data["externalId"] 
                    response_data = {"ExternalID": response_json_data["externalId"]}

                  else: # if event["RequestType"] == "Delete":
                    physicalResourceId = event["PhysicalResourceId"]
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)

#Get External ID Custom Resource
  GetExternalID:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GetExternalIDLambda.Arn

#Create AWS Connector
  AWSConnectorCreateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 20
      Handler: index.lambda_handler
      Role: !GetAtt AWSConnectorLambdaFunctionRole.Arn
      Environment:
        Variables:
          awsaccountid: !Ref AWS::AccountId
          externalid: !GetAtt GetExternalID.ExternalID
          crossaccountrolearn: !GetAtt WorkloadSecurityRole.Arn
      Code:
        ZipFile:
          !Sub
            |-
              import json
              import urllib3
              import boto3
              import cfnresponse
              import os

              client = boto3.client('ssm')


              def lambda_handler(event, context):

                  accountId = os.environ['awsaccountid']
                  externalId = os.environ['externalid']
                  crossAccountRoleArn = os.environ[crossaccountrolearn]

                  response_data = {}
                  if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                    parameter = client.get_parameter(Name='/player/C1/c1ApiKey', WithDecryption=True)
                    #print(parameter)
                    #return parameter ['Parameter']['Value']
                    playerApiKey = parameter ['Parameter']['Value']
                    #return playerApiKey
                    
                    parameter = client.get_parameter(Name='/player/C1/c1Region', WithDecryption=True)
                    playerC1Region = parameter ['Parameter']['Value']

                    url = "https://workload.'+playerC1Region+'.cloudone.trendmicro.com/api/awsconnectorsettings"

                    payload = json.dumps({
                      "displayName": "Techday",
                      "accountId": "accountId",
                      "accountAlias": "string",
                      "crossAccountRoleArn": "crossAccountRoleArn"                                                                                            
                    })
                    headers = {
                      'api-version': 'v1',
                      'Authorization': 'ApiKey '+playerApiKey+'',
                      'Content-Type': 'application/json'
                    }

                    http = urllib3.PoolManager()
                    encoded_payload = payload.encode("utf-8")
                    #print(headers)
                    response = http.request("POST", url=url, headers=headers, body=encoded_payload)

#i dont need any output from this. Maybe we set a flag for success or something, so we can score it separate? just to make sure it happens? 
                  #   response_json_data = json.loads(response.data.decode("utf-8"))
                  #   print(response_json_data["externalId"])
                  #   physicalResourceId = response_json_data["externalId"] 
                  #   response_data = {"ExternalID": response_json_data["externalId"]}

                  # else: # if event["RequestType"] == "Delete":
                  #   physicalResourceId = event["PhysicalResourceId"]
                  # cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
# Dont need output, - figure out response_data for this

#Create AWS Connector Custom Resource
  AWSConnectorCreate:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSConnectorCreateLambda.Arn
    DependsOn: GetExternalID 

Outputs:
  CrossAccountRoleArn:
    Value: !GetAtt WorkloadSecurityRole.Arn 