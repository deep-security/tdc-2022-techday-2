AWSTemplateFormatVersion: 2010-09-09

Resources:

# Iam Role

  c1csAttackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: c1csAttackRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - ssm:SendCommand
              - ssm:PutParameter
            Resource:
              - arn:aws:ssm:*:*:document/AWS-RunShellScript
              - arn:aws:ssm:*:*:parameter/player/C1CS/LoadBalancerHostname
          - Effect: Allow
            Action:
              - ssm:SendCommand
              - ec2:DescribeInstances
            Resource:
              - arn:aws:ec2:*:*:instance/*
            Condition:
              StringLike:
                ssm:resourceTag/Name:
                  - EKSBastion
          - Effect: Allow
            Action:
              - ssm:GetCommandInvocation
            Resource:
              - arn:aws:ssm:*:*:*

# Lambda Function
  GetLoadBalancerHostname:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 20
      Handler: index.lambda_handler
      Role: !GetAtt c1csAttackRole.Arn
      Code:
        ZipFile:
          !Sub
            - |-
              import json
              import json
              import boto3
              import botocore
              import time
              import cfnresponse
              def lambda_handler(event=None, context=None):
                print(f"Data in event: {event}")
                response_data = {}
                physicalResourceId = None
                if event["RequestType"] == "Create":
                  client = boto3.client('ssm')
                  instance_id = 'i-0713c813e8fef545d' # hard-code for example
                  response = client.send_command(
                      Targets = [
                          {
                              'Key': 'tag:Name',
                              'Values': ['EKSBastion']
                          }
                      ],
                      DocumentName='AWS-RunShellScript',
                      Parameters={
                          'commands': [
                              "sudo /usr/local/bin/kubectl get services --namespace default c1cs-attack-loadbalancer --output jsonpath='{.status.loadBalancer.ingress[0].hostname}'"
                          ]
                      }
                  )
                  command_id = response['Command']['CommandId']
                  tries = 0
                  output = 'False'
                  while tries < 10:
                      tries = tries + 1
                      try:
                          time.sleep(0.5)  # some delay always required...
                          result = client.get_command_invocation(
                              CommandId=command_id,
                              InstanceId=instance_id,
                          )
                          if result['Status'] == 'InProgress':
                              continue
                          output = result['StandardOutputContent']
                          #output = result
                          break
                      except client.exceptions.InvocationDoesNotExist:
                          continue
                  response_data = { "c1csAttackAlbHostname": output }
                  client.put_parameter(Name='/player/C1CS/LoadBalancerHostname', Value=output, Type='String', Overwrite=True)
                  print("XXXXXXXXXX")
                  print(output)
                else: # if event["RequestType"] == "Delete":
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "InvokeDeployC1CSStateMachineLambda")
                
                
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  #return output #== 'True'
            -
              lambda_function_role_arn: !Ref c1csAttackRole

 #CustomResources
  InvokeGetC1csAlbAttackHostname:
    Type: Custom::GetC1csAlbAttackHostname
    Properties:
      ServiceToken: !GetAtt GetLoadBalancerHostname.Arn
      Timeout: 5
  
Outputs:
 c1csAttackAlbHostname:
    Value: !GetAtt InvokeGetC1csAlbAttackHostname.c1csAttackAlbHostname
    Description: "Alb hostname for the c1cs attack container."
