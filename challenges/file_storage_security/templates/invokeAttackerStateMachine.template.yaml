AWSTemplateFormatVersion: 2010-09-09
Description: Deploys the AttackerMachine state machine

Metadata:
  # cfn_lint: Disable warning for unused parameters
  cfn-lint:
    config:
      ignore_checks:
        - "W2001"

Resources:
  # IAM
  DeployAttackerEnvStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - states:StartExecution
                Resource:
                  - arn:aws:states:*:*:stateMachine:DeployAttackerEnvStateMachine
              # Uncomment for deubg logs
              # - Effect: Allow
              #   Action:
              #     - logs:CreateLogGroup
              #     - logs:CreateLogStream
              #     - logs:PutLogEvents
              #   Resource: arn:aws:logs:*:*:*

  # Lambda Functions
  DeployAttackerEnvStateMachineLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 20
      Handler: index.lambda_handler
      Role: !GetAtt DeployAttackerEnvStateMachineRole.Arn
      Code:
        ZipFile: |
          import boto3
          import random
          import string
          import cfnresponse

          client = boto3.client("stepfunctions")
          clientssm = boto3.client('ssm')


          def id_generator(size, chars=string.ascii_lowercase + string.digits):
              return "".join(random.choice(chars) for _ in range(size))

          def lambda_handler(event, context):
              try:
                  parameter = clientssm.get_parameter(Name="/player/FSS/DeployAttackerEnvStateMachineArn", WithDecryption=True)
                  stateMachineArn = parameter["Parameter"]["Value"]
              
                  # Add Random number to the end of the name of the statemachine
                  randomString = "%s.%s" % (id_generator(6), id_generator(16))
                  stateMachineName = "DeployAttackerEnv" + randomString
              
                  response = client.start_execution(
                      stateMachineArn=stateMachineArn,
                      name=stateMachineName,
                  )

                  cfn_status = cfnresponse.SUCCESS

              except:
                  cfn_status = cfnresponse.FAILED

              cfnresponse.send(
                  event,
                  context,
                  cfn_status,
                  {},
                  "InvokeDeployAttackerEnvStateMachineLambda",
              )

  # Custom Resource
  InvokeDeployAttackerEnvStateMachineLambda:
    Type: Custom::DeployAttackerEnvStateMachineLambda
    Properties:
      ServiceToken: !GetAtt DeployAttackerEnvStateMachineLambda.Arn
      Timeout: 5
