AWSTemplateFormatVersion: 2010-09-09
Description: Deploys the AttackerMachine state machine

Metadata:
  # cfn_lint: Disable warning for unused parameters
  cfn-lint:
    config:
      ignore_checks:
        - "W2001"

Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription:
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: none
    Description:
      Update to where you hold the scripts. S3 bucket name for the Tech Day
      assets. Quick Start bucket name can include numbers, lowercase letters,
      uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/._]*$
    ConstraintDescription:
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    # REFERENCE (tdc-2022-2): Value in this file = latest/challenges/file_storage_security/templates/
    Default: ""
    Description:
      Update to where you hold the scripts. S3 bucket name for the Tech Day
      assets. Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Type: String

Resources:
  # IAM
  DeployAttackerEnvStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - states:StartExecution
                Resource:
                  - arn:aws:states:*:*:stateMachine:DeployAttackerEnvStateMachine
                  - arn:aws:ssm:*:*:parameter/player/FSS/DeployAttackerEnvStateMachineArn
              # Uncomment for deubg logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  # Lambda Functions
  DeployAttackerEnvStateMachineLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Timeout: 20
      Handler: index.lambda_handler
      Role: !GetAtt DeployAttackerEnvStateMachineRole.Arn
      Code:
        ZipFile: |
          import boto3
          import random
          import string
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          client = boto3.client("stepfunctions")
          clientssm = boto3.client('ssm')


          def id_generator(size, chars=string.ascii_lowercase + string.digits):
              return "".join(random.choice(chars) for _ in range(size))

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))

              try:
                  parameter = clientssm.get_parameter(Name="/player/FSS/DeployAttackerEnvStateMachineArn", WithDecryption=True)
                  stateMachineArn = parameter["Parameter"]["Value"]
              
                  # Add Random number to the end of the name of the statemachine
                  randomString = "%s.%s" % (id_generator(6), id_generator(16))
                  stateMachineName = "DeployAttackerEnv" + randomString
              
                  response = client.start_execution(
                      stateMachineArn=stateMachineArn,
                      name=stateMachineName,
                  )

                  cfn_status = cfnresponse.SUCCESS
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  cfn_status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(
                      event,
                      context,
                      cfn_status,
                      {},
                      "InvokeDeployAttackerEnvStateMachineLambda",
                  )

  # Custom Resource
  InvokeDeployAttackerEnvStateMachineLambda:
    Type: Custom::DeployAttackerEnvStateMachineLambda
    Properties:
      ServiceToken: !GetAtt DeployAttackerEnvStateMachineLambda.Arn
      Timeout: 5

  # Get hostname
  GetFSSALBHostname:
    Type: AWS::CloudFormation::Stack
    DependsOn: InvokeDeployAttackerEnvStateMachineLambda
    Properties:
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}getALBHostname.template.yaml'

Outputs:
 FSSAttackAlbHostname:
    Value: !GetAtt GetFSSALBHostname.Outputs.FSSAttackAlbHostname
    Description: "Alb hostname for the FSS attack container."
