AWSTemplateFormatVersion: 2010-09-09
Description: >
  DSA Template
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Tech Day Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      QSS3BucketName:
        default: Tech Day S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix

Parameters:
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: Update to where you hold the scripts. S3 bucket name for the Tech Day assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
    Default: nemoseax
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Description: Update to where you hold the scripts. S3 bucket name for the Tech Day assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
    Default: challenges/
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-00c409a8099fbba1d
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-04517d9bf73a4753e

Mappings:
  #Amazon Linux 2 x86_64 
  AMZN:
    us-east-1:
      AMZN: ami-0022f774911c1d690
    us-west-2:
      AMZN: ami-0ca285d4c2cda3300
    us-east-2:
      AMZN: ami-0fa49cc9dc8d62c84

Resources:
  DSAkeysRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  DSAkeysProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref DSAkeysRole

  DSA:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref DSAkeysProfile
      ImageId:
        !FindInMap
        - AMZN
        - !Ref AWS::Region
        - AMZN
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value: tnomura-DSA
      - Key: PlayerSsmAccess
        Value: "false"
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            su ec2-user
            sudo yum install -y docker
            sudo yum install -y curl
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod 755 /usr/local/bin/docker-compose
            sudo service docker start
            sudo sed -i -e 's/secure_path = \/sbin:\/bin:\/usr\/sbin:\/usr\/bin/secure_path = \/sbin:\/bin:\/usr\/sbin:\/usr\/bin:\/usr\/local\/bin/' /etc/sudoers
            sudo yum install -y git
            cd /home/ec2-user
            sudo git clone https://github.com/OWASP/NodeGoat.git
            cd NodeGoat
            sudo sed -i -e 's/4000/80/' config/env/all.js
            sudo sed -i -e 's/4000:4000/80:80/' docker-compose.yml
            sudo docker-compose build
            sudo docker-compose up -d
            cd ../
            mkdir attacker
            cd attacker
            touch Dockerfile
            echo "FROM ubuntu:18.04" >> Dockerfile
            echo "RUN apt-get update && apt-get install -y wget && apt-get install -y cron" >> Dockerfile
            echo "ADD attack.sh /root/attack.sh" >> Dockerfile
            echo "RUN chmod 0644 /root/attack.sh" >> Dockerfile
            echo "RUN crontab -l | { cat; echo \"* * * * *  bash /root/attack.sh\";} | crontab -" >> Dockerfile
            echo "ADD run.sh /root/run.sh" >> Dockerfile
            echo "CMD [\"sh\",\"/root/run.sh\"]" >> Dockerfile
            touch attack.sh
            echo "#!/bin/bash" >> attack.sh
            echo "wget --user-agent=\"SQLNinja\" http://nodegoat-web-1/login" >> attack.sh
            touch run.sh
            echo "/etc/init.d/cron start" >> run.sh
            echo "tail -f /dev/null" >> run.sh
            sudo docker build -t attacker .
            sudo docker run -d --net nodegoat_default attacker
            cd ../
            sudo curl -OL https://workload.trend-us-1.cloudone.trendmicro.com:443/software/agent/amzn2/x86_64/20.0.0.4726/agent.rpm
            sudo rpm -i agent.rpm
