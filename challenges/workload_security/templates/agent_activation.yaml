AWSTemplateFormatVersion: 2010-09-09

Resources:
  WSAgentActivateLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies: 
        - PolicyName: WSAgentActivatePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                Resource: 
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/player/C1/c1ApiKey
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/player/C1/c1Region
              - Effect: "Allow"
                Action:
                  - ssm:SendCommand
                Resource:
                  - Fn::Join:
                    - ""
                    - - "arn:"
                      - !Ref AWS::Partition
                      - ":ec2:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":instance/"
                      - "{{resolve:ssm:WS_TLSI_INSTANCE:1}}"
                  - Fn::Join:
                    - ""
                    - - "arn:"
                      - !Ref AWS::Partition
                      - ":ec2:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":instance/"
                      - "{{resolve:ssm:WS_CONTAINER_INSTANCE:1}}"
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}::document/AWS-RunShellScript
                  
  WSAgentActivateLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          import json, boto3, requests, os, logging
          import cfnresponse
          
          logger = logging.getLogger(__name__)
          logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)        
          
          def lambda_handler(event, context):
              logger.debug(event)
              try:
                  if event['RequestType'] == 'Create':              
                      tlsi_instance = os.environ['TLSI_INSTANCE']
                      container_instance = os.environ['CONTAINER_INSTANCE']
                      ec2_instance_id_list = [tlsi_instance, container_instance]
          
                      ssmcliant = boto3.client('ssm')
                      api_key = ssmcliant.get_parameter(Name='/player/C1/c1ApiKey')["Parameter"]["Value"]
                      region = ssmcliant.get_parameter(Name='/player/C1/c1Region')["Parameter"]["Value"]
              
                      authorization = "ApiKey " + api_key
                      BaseURL = "https://workload." + region + ".cloudone.trendmicro.com/api/agentdeploymentscripts"
              
                      json_data = {
                          "platform": "linux",
                          "validateCertificateRequired": "true",
                          "validateDigitalSignatureRequired": "false",
                          "activationRequired": "true"
                      }
              
                      headers = {'Content-Type': 'application/json', 'api-version': 'v1', 'Authorization': authorization}
                      result = requests.post(BaseURL, headers=headers, data = json.dumps(json_data))
                      dict_result = json.loads(result.text)
                      script = dict_result['scriptBody']
              
                      activate_comand = "/opt/ds_agent/dsa_control -a dsm://agents.workload." + region + ".cloudone.trendmicro.com:443/ "
                      tenantid_and_token = script.split()
                      tenantid = tenantid_and_token[-2]
                      token = tenantid_and_token[-1]
                      activationcode = activate_comand + tenantid + " " + token
              
                      response = ssmcliant.send_command(
                          InstanceIds = ec2_instance_id_list,
                          DocumentName = "AWS-RunShellScript",
                          Parameters = {
                              "commands": [activationcode]
                          },
                      )
                  sendResponseCfn(event, context, cfnresponse.SUCCESS)

              except Exception as e:
                  print(e)
                  sendResponseCfn(event, context, cfnresponse.FAILED)

          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")                         
      Handler: index.lambda_handler
      Role: !GetAtt WSAgentActivateLambdaRole.Arn
      Runtime: python3.7
      Timeout: 300
      Environment:
        Variables:
          TLSI_INSTANCE: "{{resolve:ssm:WS_TLSI_INSTANCE:1}}"
          CONTAINER_INSTANCE: "{{resolve:ssm:WS_CONTAINER_INSTANCE:1}}"

  WSAgentActivate:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt WSAgentActivateLambda.Arn
