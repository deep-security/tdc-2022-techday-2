AWSTemplateFormatVersion: 2010-09-09

Resources:
  C1WSEppOfflineCheckScoreRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies: 
        - PolicyName: C1WSEppOfflineCheckScorePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                Resource: 
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/player/C1/c1ApiKey
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/player/C1/c1Region
                
  C1WSEppOfflineCheckScoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: |
          import requests as rq
          import json as js
          import boto3
          
          print('Loading function')
          
          def get_ssm_params(*keys):
              result = {}
              ssm = boto3.client('ssm')
              response = ssm.get_parameters(
                  Names=keys,
                  WithDecryption=True,
              )
              for p in response['Parameters']:
                  result[p['Name']] = p['Value']
              return result
          
          def lambda_handler(event, context):
              parameter = get_ssm_params("/player/C1/c1ApiKey")
              parameter_region = get_ssm_params("/player/C1/c1Region")
              region = parameter_region["/player/C1/c1Region"]
              URL_search_policy = "https://workload." + region +".cloudone.trendmicro.com/api/policies"
              key = parameter["/player/C1/c1ApiKey"]
              APIkey = "Apikey " + key
              header = {
              "Content-Type": "application/json",
              "Authorization" : APIkey,
              "api-version": "v1",
              }
          
              r = rq.get(URL_search_policy, headers=header)
              search_policy = js.loads(r.text)
              for policy in search_policy["policies"]:
                  if policy["policySettings"]["antiMalwareSettingOfflineScheduledScanEnabled"]["value"] == "true" and policy["name"] == "usethispolicy":
                      return(True)
              return(False) 
      Handler: index.lambda_handler
      Role: !GetAtt C1WSEppOfflineCheckScoreRole.Arn
      Runtime: python3.7
      MemorySize: 512
    DependsOn:
      - C1WSEppOfflineCheckScoreRole
Outputs:
  C1WSEppOfflineCheckScoreLambdaName:
    Value: !Ref C1WSEppOfflineCheckScoreLambda
