AWSTemplateFormatVersion: 2010-09-09
Description: >
  This service catalog for the Agent Version Control challenge (N-2).

Parameters:
  # Bucket path related
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: QSS3BucketName
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: QSS3KeyPrefix
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: 'AWS::SSM::Parameter::Value<String>'
  PublicSubnet1SSMParameter:
    Default: PublicSubnet1
    Description: Retrieve the PublicSubnet1 from SSM Parameter Store
    Type: 'AWS::SSM::Parameter::Value<String>'
  LatestAmiId: 
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base'
  c1ApiKeySSMKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Retrieve the C1 API Key from the SSM Parameter Store
    Default: /player/C1/c1ApiKey
  c1RegionSSMKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /player/C1/c1Region
    Description: Retrieve the C1 Region Key from the SSM Parameter Store

Resources:
  # Everything that needs to be created even before player starts playing.
  AVCWinBucket:
    Type: AWS::S3::Bucket
  WriteToV1BucketManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: !Sub Policy to write to ${AVCWinBucket}
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:PutObject'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${AVCWinBucket}/*'
  CleanupBucketOnDelete:
    Type: Custom::cleanupBucket
    Properties:
      ServiceToken: !GetAtt 'CleanBucketFunction.Arn'
      BucketName: !Ref AVCWinBucket
      DependsOn: AVCWinBucket
  CleanBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Cleans out Bucket during delete
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt "CleanBucketRole.Arn"
      Timeout: 900

      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import boto3
          import time
          status = cfnresponse.SUCCESS
          logger = logging.getLogger(__name__)
          logging.basicConfig(format='%(asctime)s %(message)s',level=logging.DEBUG)
          def handler(event, context):
              logger.debug(event)
              if event['RequestType'] == 'Delete':
                BUCKETNAME = event['ResourceProperties']['BucketName']
                s3 = boto3.resource('s3')
                time.sleep(240)
                bucket = s3.Bucket(BUCKETNAME)
                bucket_versioning = s3.BucketVersioning(BUCKETNAME)
                if bucket_versioning.status == 'Enabled':
                  bucket.object_versions.delete()
                else:
                  bucket.objects.all().delete()
                cfnresponse.send(event, context, status, {}, None)
              else:
                cfnresponse.send(event, context, status, {}, None)
  CleanBucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: lambda-bucketcleaner
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${AVCWinBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketVersioning
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${AVCWinBucket}'
  AVCWinClientSSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Ref WriteToV1BucketManagedPolicy
        - !Ref CreateSSMParameterManagedPolicy
      Path: /
  AVCWinInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'LatestAmiId'
      InstanceType: m6a.large
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId:
            !Ref PublicSubnet1SSMParameter
      Tags:
      - Key: Name
        Value: WinAVCClient
      - Key: PlayerSsmAccess
        Value: "true"
      UserData:
        Fn::Base64: !Sub |
          <powershell>
            [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
            iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
            choco install python --version=3.10.4 -y
            choco install awscli -y
            pip install requests
            pip install boto3
            pip install http
            net user Administrator TrendMicro0!
            $scriptList = @(
              'C:\Projects\2-C1WSInstaller.ps1'
              'C:\Projects\3-CreateSchTask.ps1'
            )
            (New-Object System.Net.WebClient).DownloadFile("https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}workloadsecurity/agentversioncontrol/scripts/Projects.zip", "C:\Users\Administrator\Downloads\Projects.zip")
            Expand-Archive C:\Users\Administrator\Downloads\Projects.zip c:\
            Set-Content -Path 'C:\Projects\Bucket.txt' -Value '${AVCWinBucket}' -NoNewline
            Set-Content -Path 'C:\Projects\C1Region.txt' -Value '${c1RegionSSMKey}' -NoNewline
            Set-Content -Path 'C:\Projects\C1WSAPIKey.txt' -Value '${c1ApiKeySSMKey}' -NoNewline
            python C:\Projects\1-population.py
            foreach ($script in $scriptList) {
              & $script 
            }
          </powershell>
  TaskCheckCustomScript:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
       BucketName: !Ref AVCWinBucket
       ObjectNames: 'UpgradeTask.txt'
       ObjectPrefixes: ''
       ExpectedValues: 'True'
       FunctionName: 'AVC-Custom-Script'
      TemplateURL: !Sub 'https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}workloadsecurity/agentversioncontrol/templates/answer_checker.template.yaml'
      TimeoutInMinutes: 5
#Outputs: