AWSTemplateFormatVersion: 2010-09-09
Description: >
  SecJam EC2 Template Mapped for us-east-1 and us-west-2
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: EC2 Configuration
      Parameters:
      - KeyName
    - Label:
        default: SecJam Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
    ParameterLabels:
      KeyName:
        default: EC2 Key Pair for SSH access
      QSS3BucketName:
        default: Sec Jam S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
Parameters:
  KeyName:
    Description: KeyPair for EC2 Instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Select an existing EC2 Key Pair.
    Default: "lab-key-pair"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: none
    Description: Update to where you hold the scripts. S3 bucket name for the SecJam assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: "-"
    Description: Update to where you hold the scripts. S3 bucket name for the SecJam assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
  PlayerPassword:
    Type: String
  SecretPassword:
    Type: String
  DSMFQDN:
    Type: String
  VPCCIDR:
    Type: String

Mappings:
  AMZN:
    us-east-1:
      AMZN: ami-0323c3dd2da7fb37d
    us-west-2:
      AMZN: ami-0d6621c01e8c2de2c
    us-east-2:
      AMZN: ami-0f7919c33c90f5b58
  DSMRHEL:
    us-east-1:
      DSMRHEL: ami-08e923f2f38197e46
    us-west-2:
      DSMRHEL: ami-0be2c515a090d16b0
    us-east-2:
      DSMRHEL: ami-0aaba9ba5c26d33c7


Resources:
  DSASecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
        GroupDescription: "DSA Security Group"
        VpcId: !Ref VPC
  SGBaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DSASecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !GetAtt DSASecurityGroup.GroupId
  AllowSSHFromVPC:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DSASecurityGroup
      IpProtocol: 'tcp'
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref VPCCIDR
  DSASSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction
      Path: /
  DSASSMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref DSASSMRole
  DSA1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref DSASSMProfile
      ImageId:
        !FindInMap
        - AMZN
        - !Ref AWS::Region
        - AMZN
      InstanceType: t2.large
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Ref: DSASecurityGroup
          SubnetId:
            Ref: PrivateSubnet1
      Tags:
      - Key: Name
        Value: DSA1
      - Key: PlayerSsmAccess
        Value: "true"
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            download(){  
            until curl -f $@ ; 
            do
            sleep 1
            done
            }
            echo https://${DSMFQDN} > /opt/DSMURL
            echo '${PlayerPassword}' > /opt/DSMPassword
            mkdir /etc/scripts
            download -o /etc/scripts/Infra.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/VictimInfra.sh
            chmod +x /etc/scripts/Infra.sh
            /etc/scripts/Infra.sh
            download -o /etc/scripts/NewPort.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/VictimNewPort.sh
            chmod +x /etc/scripts/NewPort.sh
            download -o /etc/scripts/NewUser.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/VictimNewUser.sh
            chmod +x /etc/scripts/NewUser.sh
            download -o /etc/scripts/WRSCurl.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/VictimWRSCurl.sh
            chmod +x /etc/scripts/WRSCurl.sh 
            download -o /opt/createAPIKey.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/createAPIKey.sh
            chmod +x /opt/createAPIKey.sh
            /opt/createAPIKey.sh >> /opt/createAPIKey.log
            download -o /opt/DSA.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/DSAActivate.sh
            chmod +x /opt/DSA.sh
            /opt/DSA.sh >> /opt/DSA.log

  DSA2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref DSASSMProfile
      ImageId:
        !FindInMap
        - AMZN
        - !Ref AWS::Region
        - AMZN
      InstanceType: t2.large
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - Ref: DSASecurityGroup
          SubnetId:
            Ref: PrivateSubnet1
      Tags:
        - Key: Name
          Value: DSA2
        - Key: PlayerSsmAccess
          Value: "true"
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -x
            #!/bin/bash -x
            download(){  
            until curl -f $@ ; 
            do
            sleep 1
            done
            }
            mkdir /etc/scripts
            download -o /etc/scripts/Infra.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/AttackerInfra.sh
            chmod +x /etc/scripts/Infra.sh
            /etc/scripts/Infra.sh
            echo "${DSA1.PrivateIp}" > /etc/scripts/VictimIP
            echo https://${DSMFQDN} > /opt/DSMURL
            echo '${PlayerPassword}' > /opt/DSMPassword
            download -o /etc/scripts/DrupalExploit.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/AttackerDrupalExploit.sh
            chmod +x /etc/scripts/DrupalExploit.sh
            download -o /etc/scripts/BruteForce.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/AttackerBruteForce.sh
            chmod +x /etc/scripts/BruteForce.sh
            download -o /opt/createAPIKey.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/createAPIKey.sh
            chmod +x /opt/createAPIKey.sh
            /opt/createAPIKey.sh >> /opt/createAPIKey.log
            download -o /opt/DSA.sh https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}dsm/scripts/DSAActivate.sh
            chmod +x /opt/DSA.sh
            /opt/DSA.sh >> /opt/DSA.log

Outputs:
  DSA1InstanceId:
    Description: DSA protected server 1 instance id.
    Value: !Ref DSA1
  DSA2InstanceId:
    Description: DSA protected server 2 instance id.
    Value: !Ref DSA2
  DSA1IP:
    Description: IP address of DSA1
    Value: !GetAtt DSA1.PrivateIp
