AWSTemplateFormatVersion: "2010-09-09"
Description: "Enables IRSA for the aws-node daemonset (qs-1r15gqig4)"
Metadata:
  QSLint:
    Exclusions: [W9002, W9003, W9004, W9006]
Parameters:
  ClusterName:
    Type: String
  OIDCProvider:
    Type: String
Resources:
  RBACRole:
    Type: "AWSQS::Kubernetes::Resource"
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: aws-node-enable-irsa
        rules:
          - apiGroups: ["apps"]
            resources:
              - daemonsets
            verbs:
              - patch
              - get
          - apiGroups: [""]
            resources:
              - serviceaccounts
            verbs:
              - patch
              - get
  ServiceAccount:
    Type: "AWSQS::Kubernetes::Resource"
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: aws-node-enable-irsa
          annotations:
            eks.amazonaws.com/role-arn: ${AWSNodeIAMRole.Arn}
  ServiceClusterRoleBinding:
    Type: "AWSQS::Kubernetes::Resource"
    DependsOn: [ServiceAccount, RBACRole]
    DeletionPolicy: Retain
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: |
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: aws-node-enable-irsa
        subjects:
          - kind: ServiceAccount
            name: aws-node-enable-irsa
            namespace: kube-system
        roleRef:
          kind: ClusterRole
          name: aws-node-enable-irsa
          apiGroup: rbac.authorization.k8s.io
  AWSNodeIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/${OIDCProvider}"
              },
              "Action": "sts:AssumeRoleWithWebIdentity",
              "Condition": {
                "StringEquals": {
                  "${OIDCProvider}:sub": "system:serviceaccount:kube-system:aws-node"
                }
              }
            }
          ]
        }
      Path: "/"
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
  JobResource:
    Type: "AWSQS::Kubernetes::Resource"
    DeletionPolicy: Retain
    DependsOn: ServiceClusterRoleBinding
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub |
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: aws-node-enable-irsa
        spec:
          template:
            spec:
              serviceAccountName: aws-node-enable-irsa
              nodeSelector:
                kubernetes.io/os: linux
              containers:
              - name: aws-node-enable-irsa
                image: bitnami/kubectl:1.18
                command: ["/bin/bash","-c"]
                args: 
                  - >
                    sleep 10;
                    kubectl patch sa aws-node -p '{"metadata": {"annotations": {"eks.amazonaws.com/role-arn": "${AWSNodeIAMRole.Arn}" }}}';
                    kubectl patch daemonset aws-node -p '{"spec": {"template": {"metadata": {"annotations": {"irsa": "enabled"}}}}}';
                    RETRIES=0 ;
                    while true ; do
                      DESIRED=$(kubectl get daemonset aws-node -n kube-system -o jsonpath={.status.desiredNumberScheduled});
                      UPDATED=$(kubectl get daemonset aws-node -n kube-system -o jsonpath={.status.updatedNumberScheduled});
                      READY=$(kubectl get daemonset aws-node -n kube-system -o jsonpath={.status.numberReady});
                      if [[ "$DESIRED" == "$UPDATED" && "$DESIRED" == "$READY" ]]; then break ; fi ;
                      echo "Desired: $DESIRED Updated: $UPDATED Ready: $READY" ;
                      ((RETRIES=RETRIES+1));
                      if [ $RETRIES -gt 40 ]; then echo "Timed out waiting for pods to become ready"; exit 1; fi;
                      sleep 15;
                    done
              restartPolicy: OnFailure
          backoffLimit: 4
