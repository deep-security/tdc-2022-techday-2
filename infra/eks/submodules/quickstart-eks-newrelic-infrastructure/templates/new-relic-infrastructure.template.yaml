AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys New Relic Infrastructure into an existing Kubernetes Cluster (qs-1pipr93dp)
Parameters:
  KubeClusterName:
    Type: String
  NewRelicLicenseKey:
    Type: String
    NoEcho: true
Resources:
  KubeStateMetricsClusterRole:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: kube-state-metrics
        rules:
        - apiGroups: [""]
          resources:
          - configmaps
          - secrets
          - nodes
          - pods
          - services
          - resourcequotas
          - replicationcontrollers
          - limitranges
          - persistentvolumeclaims
          - persistentvolumes
          - namespaces
          - endpoints
          verbs: ["list", "watch"]
        - apiGroups: ["extensions"]
          resources:
          - daemonsets
          - deployments
          - replicasets
          - ingresses
          verbs: ["list", "watch"]
        - apiGroups: ["apps"]
          resources:
          - daemonsets
          - deployments
          - replicasets
          - statefulsets
          verbs: ["list", "watch"]
        - apiGroups: ["batch"]
          resources:
          - cronjobs
          - jobs
          verbs: ["list", "watch"]
        - apiGroups: ["autoscaling"]
          resources:
          - horizontalpodautoscalers
          verbs: ["list", "watch"]
        - apiGroups: ["policy"]
          resources:
          - poddisruptionbudgets
          verbs: ["list", "watch"]
  KubeStateMetricsClusterRoleBinding:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: kube-state-metrics
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: kube-state-metrics
        subjects:
        - kind: ServiceAccount
          name: kube-state-metrics
          namespace: kube-system
  KubeStateMetricsDeployment:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: kube-state-metrics
          namespace: kube-system
        spec:
          selector:
            matchLabels:
              k8s-app: kube-state-metrics
          replicas: 1
          template:
            metadata:
              labels:
                k8s-app: kube-state-metrics
            spec:
              serviceAccountName: kube-state-metrics
              containers:
              - name: kube-state-metrics
                image: quay.io/coreos/kube-state-metrics:v1.4.0
                ports:
                - name: http-metrics
                  containerPort: 8080
                - name: telemetry
                  containerPort: 8081
                readinessProbe:
                  httpGet:
                    path: /healthz
                    port: 8080
                  initialDelaySeconds: 5
                  timeoutSeconds: 5
              - name: addon-resizer
                image: k8s.gcr.io/addon-resizer:1.8.3
                resources:
                  limits:
                    cpu: 150m
                    memory: 50Mi
                  requests:
                    cpu: 150m
                    memory: 50Mi
                env:
                  - name: MY_POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: MY_POD_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                command:
                  - /pod_nanny
                  - --container=kube-state-metrics
                  - --cpu=100m
                  - --extra-cpu=1m
                  - --memory=100Mi
                  - --extra-memory=2Mi
                  - --threshold=5
                  - --deployment=kube-state-metrics
  KubeStateMetricsRoleBinding:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: kube-state-metrics
          namespace: kube-system
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: kube-state-metrics-resizer
        subjects:
        - kind: ServiceAccount
          name: kube-state-metrics
          namespace: kube-system
  KubeStateMetricsRole:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          namespace: kube-system
          name: kube-state-metrics-resizer
        rules:
        - apiGroups: [""]
          resources:
          - pods
          verbs: ["get"]
        - apiGroups: ["apps"]
          resources:
          - deployments
          resourceNames: ["kube-state-metrics"]
          verbs: ["get", "update"]
        - apiGroups: ["extensions"]
          resources:
          - deployments
          resourceNames: ["kube-state-metrics"]
          verbs: ["get", "update"]
  KubeStateMetricsServiceAccount:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: kube-state-metrics
          namespace: kube-system
  KubeStateMetricsService:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: v1
        kind: Service
        metadata:
          name: kube-state-metrics
          namespace: kube-system
          labels:
            k8s-app: kube-state-metrics
          annotations:
            prometheus.io/scrape: 'true'
        spec:
          ports:
          - name: http-metrics
            port: 8080
            targetPort: http-metrics
            protocol: TCP
          - name: telemetry
            port: 8081
            targetPort: telemetry
            protocol: TCP
          selector:
            k8s-app: kube-state-metrics
# New Relic Kubernetes integration. Documentation https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-installation-configuration
  NewRelicServceAccount:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: newrelic
          namespace: default
        automountServiceAccountToken: true
  NewRelicClusterRole:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: newrelic
        rules:
        - apiGroups: [""]
          resources:
            - "nodes"
            - "nodes/metrics"
            - "nodes/stats"
            - "nodes/proxy"
            - "pods"
            - "services"
          verbs: ["get", "list"]
  NewRelicClusterBinding:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRoleBinding
        metadata:
          name: newrelic
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: newrelic
        subjects:
        - kind: ServiceAccount
          name: newrelic
          namespace: default
  NewRelicDaemonSet:
    Type: "Custom::KubeManifest"
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${KubeClusterName}"
      ClusterName: !Ref KubeClusterName
      Manifest: !Sub |
        apiVersion: apps/v1
        kind: DaemonSet
        metadata:
          name: newrelic-infra
          namespace: default
          labels:
            app: newrelic-infra
        spec:
          selector:
            matchLabels:
              name: newrelic-infra
          updateStrategy:
              type: RollingUpdate # Only supported in Kubernetes version 1.6 or later.
          template:
            metadata:
              labels:
                name: newrelic-infra
              annotations:
                # Needed for Kubernetes versions prior to 1.6.0, where tolerations were set via annotations.
                scheduler.alpha.kubernetes.io/tolerations: |
                  [{"operator": "Exists", "effect": "NoSchedule"},{"operator": "Exists", "effect": "NoExecute"}]
            spec:
              serviceAccountName: newrelic
              hostNetwork: true # This option is a requirement for the Infrastructure Agent to report the proper hostname in New Relic.
              dnsPolicy: ClusterFirstWithHostNet
              containers:
                - name: newrelic-infra
                  image: newrelic/infrastructure-k8s:1.9.0
                  resources:
                    limits:
                      memory: 150M
                    requests:
                      cpu: 100m
                      memory: 30M
                  volumeMounts:
                    - mountPath: /host
                      name: host-volume
                      readOnly: true
                    - mountPath: /var/run/docker.sock
                      name: host-docker-socket
                  env:
                    - name: "CLUSTER_NAME"
                      value: "${KubeClusterName}"
                    - name: "NRIA_LICENSE_KEY"
                      value: "${NewRelicLicenseKey}"
                    - name: "NRIA_VERBOSE"
                      value: "0"
           # - name: "CADVISOR_PORT" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6.
           #   value: "4194"
           # - name: "KUBE_STATE_METRICS_URL" # If this value is specified then discovery process for kube-state-metrics endpoint won't be triggered.
           #   value: "http://172.17.0.3:8080" # This is example value. Only HTTP request is accepted.
                    - name: "NRIA_DISPLAY_NAME"
                      valueFrom:
                        fieldRef:
                          apiVersion: "v1"
                          fieldPath: "spec.nodeName"
                    - name: "NRK8S_NODE_NAME"
                      valueFrom:
                        fieldRef:
                          apiVersion: "v1"
                          fieldPath: "spec.nodeName"
                    - name: "NRIA_CUSTOM_ATTRIBUTES"
                      value: '{"clusterName":"$(CLUSTER_NAME)"}'
                    - name: "NRIA_PASSTHROUGH_ENVIRONMENT"
                      value: "KUBERNETES_SERVICE_HOST,KUBERNETES_SERVICE_PORT,CLUSTER_NAME,CADVISOR_PORT,NRK8S_NODE_NAME,KUBE_STATE_METRICS_URL"
              volumes:
                - name: host-volume
                  hostPath:
                    path: /
                - name: host-docker-socket
                  hostPath:
                    path: /var/run/docker.sock
              tolerations:
                - operator: "Exists"
                  effect: "NoSchedule"
                - operator: "Exists"
                  effect: "NoExecute"
