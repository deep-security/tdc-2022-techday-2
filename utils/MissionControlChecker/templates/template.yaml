Parameters:
  MissionControlAccountId:
    Type: Number
    Default: 101611349561
Resources:
  NotifierServiceRole156E35B0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  NotifierServiceRoleDefaultPolicy0848DC19:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - lambda:InvokeFunction
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: NotifierServiceRoleDefaultPolicy0848DC19
      Roles:
        - Ref: NotifierServiceRole156E35B0
  NotifierDFD80165:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "

          \      var AWS = require('aws-sdk');


          \      const fail = (context, message) => {

          \        const res = output(false, message);

          \        return res;

          \      };

          \     \ 

          \      const succeed = (context, message) => {

          \        const res = output(true, message);

          \        return res;

          \      };

          \     \ 

          \      const output = (success, message) => {

          \        return {

          \          success,

          \          message

          \        };

          \      };

          \     \ 

          \      exports.handler = async function(event, context) {

          \        console.log(\"request:\", JSON.stringify(event, undefined, 2));

          \     \ 

          \        const lambdaArn = event.lambdaArn;

          \        if (!lambdaArn){

          \          return fail(context, 'No lambdaArn present!');

          \        }

          \       \ 

          \        const lambda = new AWS.Lambda({apiVersion: '2015-03-31'});

          \        const params = {

          \          FunctionName: lambdaArn

          \        };

          \     \ 

          \        try{\ 

          \          const res = await lambda.invoke(params).promise();

          \          console.log(\"res: \", res);

          \          const resPayload = (JSON.parse(res.Payload));

          \          console.log(\"resPayload: \", JSON.stringify(resPayload, null, 2));

          \          if (resPayload.errorMessage){

          \            console.log(\"fail!\");

          \            return fail(context, resPayload.errorMessage);

          \          }

          \          else{

          \            console.log(\"success!\");

          \            return succeed(context, resPayload);

          \          }

          \        }

          \        catch(err){

          \          console.error(\"error!\");

          \          console.error(err);

          \          context.fail(context, err);

          \          return\ 

          \        }

          \      };


          \      "
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - NotifierServiceRole156E35B0
          - Arn
      Runtime: nodejs12.x
      Timeout: 15
    DependsOn:
      - NotifierServiceRoleDefaultPolicy0848DC19
      - NotifierServiceRole156E35B0
  Policy23B91518:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - NotifierDFD80165
                - Arn
        Version: "2012-10-17"
      Description: ""
      Path: /
  Role1ABCC5F0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: MissionControlAccountId
                    - :root
        Version: "2012-10-17"
      Description: Allows MissionControl to call the MissionControlNotifier lambda.
      ManagedPolicyArns:
        - Ref: Policy23B91518
Outputs:
  MissionControlNotifierFunctionName:
    Value:
      Ref: NotifierDFD80165
  MissionControlNotifierRoleArn:
    Value:
      Fn::GetAtt:
        - Role1ABCC5F0
        - Arn

